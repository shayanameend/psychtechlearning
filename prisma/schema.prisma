datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  USER
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  email      String? @unique
  password   String?
  role       Role    @default(USER)
  isVerified Boolean @default(false)
  isDeleted  Boolean @default(false)

  otp     Otp?
  profile Profile?
  notes   UserNote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OtpType {
  VERIFY_EMAIL
  RESET_PASSWORD
}

model Otp {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  code String
  type OtpType @default(VERIFY_EMAIL)

  userId String @unique @map("user_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
}

model Profile {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  firstName String
  lastName  String
  isStudent Boolean @default(false)
  notify    Boolean @default(true)

  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Section {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  sectionTitle       String
  sectionDescription String

  sectionGuidePdfId   String?     @db.ObjectId
  sectionGuidePdf     GuidePdf?
  sectionFlashcardsId String?     @db.ObjectId
  sectionFlashcards   Flashcards?
  sectionSampleTestId String?     @db.ObjectId
  sectionSampleTest   SampleTest?
  sectionFinalTestId  String?     @db.ObjectId
  sectionFinalTest    FinalTest?
  sectionUserNotes    UserNote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GuidePdf {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  label String
  link  String

  sectionId String  @unique @db.ObjectId
  section   Section @relation(fields: [sectionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Flashcards {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  label String

  cards     Flashcard[]
  sectionId String      @unique @db.ObjectId
  section   Section     @relation(fields: [sectionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Flashcard {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  question String
  answer   String

  flashcardsId String     @db.ObjectId
  flashcards   Flashcards @relation(fields: [flashcardsId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SampleTest {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  label String

  questions SampleQuestion[]
  sectionId String           @unique @db.ObjectId
  section   Section          @relation(fields: [sectionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FinalTest {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  label String

  questions FinalQuestion[]
  sectionId String          @unique @db.ObjectId
  section   Section         @relation(fields: [sectionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SampleQuestion {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  question      String
  answers       String[]
  correctAnswer String

  testId String     @db.ObjectId
  test   SampleTest @relation(fields: [testId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FinalQuestion {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  question      String
  answers       String[]
  correctAnswer String

  testId String    @db.ObjectId
  test   FinalTest @relation(fields: [testId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserNote {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  content String

  sectionId String  @db.ObjectId
  section   Section @relation(fields: [sectionId], references: [id])
  userId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
