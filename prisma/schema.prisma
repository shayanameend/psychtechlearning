datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  USER
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  email      String  @unique
  password   String
  role       Role    @default(USER)
  isVerified Boolean @default(false)
  isDeleted  Boolean @default(false)

  otp     Otp?
  profile Profile?
  notes   UserNote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OtpType {
  VERIFY_EMAIL
  RESET_PASSWORD
}

model Otp {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  code String
  type OtpType @default(VERIFY_EMAIL)

  userId String @unique @map("user_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
}

model Profile {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  firstName String
  lastName  String
  isStudent Boolean @default(false)
  notify    Boolean @default(true)

  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Week {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  weekOrder       Int    @default(0)
  weekTitle       String
  weekDescription String
  guideLabel      String
  guideLink       String
  flashcardsLabel String
  sampleTestLabel String
  finalTestLabel  String

  flashcards          Flashcard[]
  sampleTestQuestions SampleTestQuestion[]
  finalTestQuestions  FinalTestQuestion[]
  weekUserNotes       UserNote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Flashcard {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  question String
  answer   String

  weekId String @db.ObjectId
  week   Week   @relation(fields: [weekId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SampleTestQuestion {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  question      String
  answers       String[]
  correctAnswer String

  weekId String @db.ObjectId
  week   Week   @relation(fields: [weekId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FinalTestQuestion {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  question      String
  answers       String[]
  correctAnswer String

  weekId String @db.ObjectId
  week   Week   @relation(fields: [weekId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserNote {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  content String

  weekId String @db.ObjectId
  week   Week   @relation(fields: [weekId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
